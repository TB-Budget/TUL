--Turbo Utilities Library (c) Petr Losev (ТБ.Бюджет), 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class inherited RefType "Ссылочный тип строки";

inclass private

  external func lstrcmp(lpString1: String; lpString2: String): Integer; -- Compares two character strings. The comparison is case-sensitive.
    library "kernel32" name "lstrcmpA";

  external func lstrcmpi(lpString1: String; lpString2: String): Integer; -- Compares two character strings. The comparison is not case-sensitive.
    library "kernel32" name "lstrcmpiA";

inclass public

  -- Конкантенация строк
  func ConCat(values: RefString[]): RefString;
    var i, ii: Integer;
    result = New(nil as String);
    ii = LengthOfArray(values);
    for i = 1 .. ii do
      result.Set_(result.Get_ + values[i].Get_);
    od;
  end;

  -- Сравнение двух заданных строк (с учетом или без учета регистра) и возвращает число:
  --   Меньше нуля - Значение параметра strA меньше значения параметра strB.
  --   Нуль        - Значения параметров strA и strB равны.
  --   Меньше нуля - Значение strA больше значения strB.
  func Compare(strA: Variant; strB: Variant; ignoreCase: Logical = true): Integer;
    var valA, valB: String;
    valA = DynamicCast(strA) as String;
    valB = DynamicCast(strB) as String;
    if ignoreCase:
      return lstrcmpi(valA, valB);
    else
      return lstrcmp(valA, valB);
    fi;
  end;


inclass private

  -- Приведение объекта к String
  func DynamicCast(obj: Variant): Variant;
    if (obj is RefString):
      result = (obj.Get_ as String);
    elsif not (obj is String):
      result = Str(obj);
    else
      result = obj;
    fi;
  end;

inobject public

  -- Строка в кавычках
  func ToStr: String;
    result = System.ToStr(inherited ToStr);
  end;

  -- Длина строки экземпляра
  func Length: Integer;
    return (System.Length(Get_ as String));
  end;

  -- Возвращает индекс первого вхождения значения указанной строки в данном экземпляре
  func IndexOf(value: Variant; ignoreCase: Logical = true): Integer;
    var val, val_self, val_part: String;
    var p, pp, len: Integer;
    val = DynamicCast(value) as String;
    val_self = Get_ as String;
    if ignoreCase:
      return Pos(val, val_self);
    else
      len = System.Length(val);
      val_part = val_self;
      while true do
        p = Pos(val, val_part);
        if p > 0:
          if lstrcmp(val, SubStr(val_part, p, len)) = 0:
            return (pp + p);
          else
            val_part = SubStr(val_part, p + 1);
            pp = pp + p;
          fi;
        else
          return;
        fi;
      od;
    fi;
  end;


inobject private


end