--Turbo Utilities Library (c) Petr Losev (ТБ.Бюджет), 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class inherited RefType "Ссылочный тип массива";

inclass public

inclass private

  func DynamicCast(obj: Variant): Variant;
    var arr: Variant[];
    var i, ii: Integer;
    -- приводим к List
    result = List.Create;
    if obj is List:
      result.Assign(obj);
    elsif VarType(obj) = varArray:
      arr = obj as Variant[];
      ii = LengthOfArray(arr);
      for i = 1 .. ii do
        result.Add(arr[i]);
      od;
    elsif VarType(obj) <> varNull:
      result.Add(obj);
    fi;
  end;


inobject public

  func Count: Integer;
    return ((Get as List).Count);
  end;

  proc SetItem(index: Integer; value: Variant);
    (Get as List).Items[index] = value;
  end;

  func GetItem(index: Integer): Variant;
    return ((Get as List).Items[index]);
  end;

  proc AddItem(value: Variant);
    (Get as List).Add(value);
  end;

  proc InsertItem(index: Integer; value: Variant);
    (Get as List).Insert(index, value);
  end;

  func ToStr: String;
    var item_tmp: Variant;
    var i, ii: Integer;
    result = '[';
    ii = Count;
    for i = 1 .. ii do
      item_tmp = GetItem(i);
      result = result + if(item_tmp is RefType, (item_tmp as RefType).ToStr, Str(GetItem(i)));
      if i <> ii: result = result + ", "; fi;
    od;
    result = result + ']';
  end;


inobject private


end