--Turbo Utilities Library (c) Златовратский Павел(ТБ.Бюджет), 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class inherited Command "Команда, вызывающая объект-функцию";

inclass

  -- Конструктор
  func CreateEx (commName: String;  -- имя команды
                 commCaption: String;  -- отображение
                 Callback: TUL.FuncObj = nil; -- обработчик
                 commImage: Image = nil -- иконка
                ): DynamicCommand;

    Result = inherited Create;
    Result.Name = commName;
    Result.Caption = commCaption;
    Result.cb = Callback;
    if commImage <> nil: Result.Image = commImage; fi;
  end;

  -- Поиск зарегистрированной команды
  func GetRegisteredCommand(commx: DynamicCommand): DynamicCommand;
    var comm: Command;
    var dynComm: DynamicCommand;
    var  i, ii, y, yy, z, zz: Integer;
    var grName: String;
    grName = '$';
    with Commands do
      ii = GroupsCount;
      for i = 1 .. ii do
        with Group[i] do
          if Name = 'Local':
            yy = GroupsCount;
            for y = 1 .. yy do
              if Group[y].Name = grName:
                with Group[y] do
                  zz = CommandsCount;
                  for z = 1 .. zz do
                    comm = Command[z];
                    if comm is DynamicCommand:
                      dynComm = comm as DynamicCommand;
                      if dynComm = commx:
                        return dynComm;
                      fi;
                    fi;
                  od;
                end;
              fi;
            od;
            break;
          fi;
        end;
      od;
    end;
  end;

inobject

  var cb: TUL.FuncObj; -- обработчик

  proc OnDispatch;
    if cb <> nil: cb.Call(nil); fi;
  end;

  func Equal(commx: DynamicCommand): Logical;
    if commx <> nil:
      result = (commx.Name = self.Name);
    fi;
  end;

  -- Регистрирует команду в группе команд заданного класса
  proc Register(clsName: String);
    var commgr: CommandGroup;
    var  i, ii, y, yy: Integer;
    var grName: String;
    grName = '$';
    with Commands do
      ii = GroupsCount;
      for i = 1 .. ii do
        with Group[i] do
          -- Ищем группу заданного класса
          if Name = 'Local':
            yy = GroupsCount;
            for y = 1 .. yy do
              if Group[y].Name = grName:
                commgr = Group[y];
                break;
              fi;
            od;
            -- Если ничего не нашли - создадим группу сами
            if commgr = nil:
              commgr = AddGroup(grName);
            fi;
            break;
          fi;
        end;
      od;
    end;
    commgr.AddCommand(self); -- регистрируем команду
  end;

  func IsRegistered: Logical;
    return (ParentGroup <> nil);
  end;

  proc UnRegister;
    if IsRegistered:
      ParentGroup.DeleteCommand(ParentIndex);
    fi;
  end;
end





