--Turbo Utilities Library (c) Златовратский Павел(ТБ.Бюджет), 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class "Прототип итератора" synonym Iterator;

inclass

inobject
  func Текущий synonym Current: Variant;
     -- Возвращает текущий элемент итератора
     SetError(0, 'Абстрактный метод');
     return nil;
  end;

  func НаСледующий synonym MoveNext: Logical;
     -- Переводит указатель на следующий элемент и возващает Истина
     -- Если это невозможно - возвращает Ложь
     SetError(0, 'Абстрактный метод');
     return False;
  end;

  func Сброс synonym Reset: Logical;
     -- Переводит указатель на "пред-первый" элемент и возвращает Истина
     -- То есть после следующего MoveNext будет доступен первый элемент
     -- Если это невозможно (итератор "неперематываемый") - возвращает Ложь
     return False;
  end;

  func ToArray(MaxIter: Integer=0x7FFFFFFF): Variant[];
  var i: Integer;
    Result = [];
    i = 1;
    while self.MoveNext do
      Result[i] = self.Current;
      i = i + 1;
    end;
  end;

  func Map(ApFunc: FuncObj): Итераторы.Iterator;
    Result = Итераторы.Map.New(ApFunc, self);
  end;

  func Filter(FFunc: FuncObj): Итераторы.Iterator;
    Result = Итераторы.Filter.New(FFunc, self);
  end;

end
