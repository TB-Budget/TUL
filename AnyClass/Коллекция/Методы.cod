--Turbo Utilities Library (c) Златовратский Павел(ТБ.Бюджет), 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class "Методы для работы с коллекциями";

inclass private

 tmpSt: Storage;

inclass  public

  proc AddInArray (var Array: Variant[]; Item: Variant);
    var l: Integer;
    l = LengthOfArray(Array);
    Array[l + 1] = Item;
  end; 

  func СложениеПоКругу synonym CircleAdd (X: Integer; Y:Integer; maxVal:Integer=0x3FFFFFFF): Integer;
    -- Сложение двух аргументов, так, чтобы результат не превышал maxVal
    -- Если результат потенциально больше - начинаем считать с 0.
    if X < 0 then
      X = Int(Abs(maxVal + X));
    end;
    if Y < 0 then
      Y = Int(Abs(maxVal + Y));
    end;
    while X > maxVal do
      X = X - maxVal;
    end;
    while Y > maxVal do
      Y = Y - maxVal;
    end;
    Result = X + Y;
    while Result > maxVal do
      Result = Result - maxVal;
    end;
  end;

  func Crc2Int (CRC: String): Integer;
    if tmpSt = nil then
      tmpSt = Storage.Create; -- на самом деле сойдет любой объект
    end;
    Result = (tmpSt.Evaluate("0x" + CRC) as Integer);
    Result = Int(Abs(Result));
  end;

  func Хэш synonym Hash (X: Variant): Integer;
    var vt, i, tmpI: Integer;
    var tmpS: String;
    var tmpA: Variant[];
    vt = VarType(X);
    if vt = varInt then
      return CircleAdd(X, 0);
    elsif vt = varString then
      tmpS = "";
      AddCRC32(tmpS, X);
      return Crc2Int(tmpS);
    elsif vt = varNumeric then
      tmpS = "";
      AddCRC32(tmpS, X);
      return Crc2Int(tmpS);
    elsif vt = varLogical:
      return if(X, 1, 2);
    elsif vt = varDate:
      return Int(PeriodSec(X, 1.1.1900));
    elsif vt = varArray:
      tmpA = X as Variant[];
      Result = 0;
      for i = 1 .. LengthOfArray(tmpA) do
        tmpI = Hash(tmpA[i]);
        if tmpI = -1 then
          return -1;
        else
          Result = CircleAdd(Result, tmpI);
        end;
      end;
    elsif vt = varObject:
--      if X.InheritsFrom(Record):
--        return Hash(X.ExtID);
      if X.InheritsFrom(Sign):
        return Hash(X.DocID);
      elsif X.ClassInfo.MemberByName('ExtID') <> nil:
        return Hash(X.ExtID);
      elsif X.ClassInfo.MemberByName('Hash') <> nil:
        return Hash(X.Hash);
      else
        return -1; -- не хэшируемые объекты возвращают -1
      fi;
--    elsif vt = varUnit:
--      Result = CircleAdd(Hash(UnitValue(X)),
--                         Hash(UnitFactor(X)));
    else
      Result = -1; -- не хэшируемые объекты возвращают -1
    end;
  end;

  proc Сортировка synonym Sort (var MyArray: Variant[]; KeyFunc: FuncObj=nil); -- Сортировка вставками
    var active: Variant;
    var i, j, size: Integer;

    func GetKey(Item: Variant): Variant;
      -- Функция взятия ключа приминением фукнции
      if KeyFunc=nil then
         Result = Item;
      else
         Result = KeyFunc.Call([Item]);
      end;
    end;

    size = LengthOfArray(MyArray);
    for i = 2 .. size do
      active = MyArray[i];
      j = i - 1;
      while (j >= 1) and (Compare.Rich.Compare(GetKey(MyArray[j]), GetKey(active)) = 1) do
        -- "Проматываем" назад до места, куда надо вставить
        -- т.е. когда "наш" больше предыдущего
        MyArray[j + 1] = MyArray[j];
        j = j - 1;
      od;
      MyArray[j + 1] = active;
    od;
  end;

end