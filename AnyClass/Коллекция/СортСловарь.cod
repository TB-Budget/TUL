--Turbo Utilities Library (c) Златовратский Павел(ТБ.Бюджет), 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class inherited Итераторы.Итератор "Пара ключ-значение" synonym SortDict;
import Classes Коллекция.Методы;


inobject public

  -- Количество элементов в контейнере
  func Количество synonym Count: Integer;
    return LengthOfArray(dataS);
  end;

  -- Очистка всех данных
  proc Очистить Synonym Clear;
    dataS = nil;
    valueS = nil;
  end;

  -- Добавление указанного элемента, при наличии - заменяется
  proc Добавить synonym Add (const key: Variant; value: Variant=nil);
    var ret: Variant[];
    ret = Search(key);
    if ret[1] = nil:
      InsertInArray(dataS, ret[2], key);
      InsertInArray(valueS, ret[2], value);
    else
      dataS[ret[2]] = key;
      valueS[ret[2]] = key;
    fi;
  end;

  -- Удалить элемент
  proc Удалить synonym Delete (const key: Variant);
    var ret: variant[];
    ret = Search(key);
    if ret[1] <> nil:
      DeleteFromArray(dataS, ret[2]);
      DeleteFromArray(valueS, ret[2]);
    fi;
  end;


  -- Возврат значения по ключу
  func Получить synonym Get_ (const key: Variant; default: Variant = nil): Variant;
    var tmp: Variant[];
    tmp = Search(key);
    if tmp[1] = nil then
       -- Если ключ не найден - возвращается значение по умолчанию
       return default;
    else
       return valueS[tmp[2]];
    fi;
  end;

  func Содержит synonym Have (const key: Variant): Logical;
    var tmp: Variant[];
    tmp = Search(key);
    if tmp[1] = nil then
      return False;
    else
      return True;
    fi;
  end;

  func Найти synonym Search (const elem: Variant): Variant[];
    -- аргументы:
    --   elem - искомый элемент;
    -- возврат:
    --   массив из:
    --   1 найденное значение или nil.
    --   2 позиция найденного элемента или позицию вставки, если элемент не найден.
    --   3 всегда -1 для совместимости с обычным словарём
    Result = SearchSort(elem);
  end;

  func НайтиСорт synonym SearchSort (const elem: Variant): Variant[];
    --Для совместимости с обычным словарём тянем третий возвращаемый параметр
    var first, last, mid, n: Integer;
    n = Count;
    first = 1;
    last = n + 1;
    mid = first + div(last - first, 2);
    if n = 0 or TUL.Compare.Rich.Cmp(dataS[1], elem) = 1:
      return [nil, 1, -1];
    elsif TUL.Compare.Rich.Cmp(dataS[n], elem) = -1:
      return [nil, n + 1, -1];
    fi;
    while (first < last) do
      if TUL.Compare.Rich.Cmp(elem, dataS[mid]) <> 1:
        last = mid;
      else
        first = mid + 1;
      fi;
      mid = first + div(last - first, 2);
    od;
    if dataS[last] = elem:
      result = [dataS[last], last, -1];
    else
      result = [nil, last, -1];
    fi;
  end;


  -- Реализация протокола итератора. Итератор перебирает ключи
  --{
  func Текущий synonym Current: Variant;
     -- Возвращает текущий элемент итератора
     return dataS[nowpos];
  end;

  func НаСледующий synonym MoveNext: Logical;
    nowpos = NextArrItem(dataS, nowpos);
    if nowpos = -1 then
      return False;  -- не нашли следующего хеша - значит закончили пребор
    end;
    return True;
  end;

  func Сброс synonym Reset: Logical;
     -- Переводит указатель на "пред-первый" элемент и возвращает Истина
     -- То есть после следующего MoveNext будет доступен первый элемент
     -- Если это невозможно (итератор "неперематываемый") - возвращает Ложь
     nowpos = 0;
     return True;
  end;

  -- Возвращает список ключей в качестве массива
  func ВМассив synonym ToArray (MaxIter:Integer=0x7FFFFFFF): Variant[];
    return dataS;
  end;
  --}
inobject private

  dataS[]: variant;  --Хранилище элементов на основе сортировки
  valueS[]: variant;  --Значения значений на основе сортировки
  nowpos: Integer; --Текущая позиция при переборе элементов

end