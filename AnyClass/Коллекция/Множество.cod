--Turbo Utilities Library (c) Златовратский Павел(ТБ.Бюджет), 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class inherited Коллекция.Словарь "Коллекция элементов" synonym Set;
--Множество фактически является словарём у которого игнорируются значения.
import Classes Коллекция.Методы;

inobject public
  -- Возврат указанного элемента или nil
  func Получить synonym Get (const key: Variant; default: Variant = nil): Variant;
    result = Search(key)[1];
  end;

  -- Возвращет элемент по индексу
  func Элемент synonym Item (index: Integer): Variant;
    if index >= 0 and index <= Count:
      if index < LengthOfArray(dataS) then
        result = dataS[index];
      else
        return self.ToArray[index];  -- Однократный перебор, а потом будет таскать из кэша
      end;
    else
      SetError(0, 'Внутренняя ошибка: значение индекса выходит за границы допустимых значений.');
    fi;
  end;

  -- Методы для множеств
  -- Может стоит потом сделать функциями (перенести в класс)
  func Объединение synonym Union(other: Коллекция.Set): Коллекция.Set;
    var i, ii: Integer;
    var one: Variant;
    Result = Коллекция.Set.Create;
    ii = self.Count;
    for i = 1..ii do
      one = self.Item(i);
      Result.Add(one);
    end;
    ii = other.Count;
    for i = 1..ii do
      one = other.Item(i);
      Result.Add(one);  -- Метод Add сам заботится о недобавлении одинаковых
    end;
  end;

  func Пересечение synonym Intersect(other: Коллекция.Set): Коллекция.Set;
    var i, ii: Integer;
    var one: Variant;
    Result = Коллекция.Set.Create;
    ii = self.Count;
    for i = 1..ii do
      one = self.Item(i);
      if other.Search(one)[1] <> nil then
        Result.Add(one);
      end;
    end;
  end;

  func Дополнение synonym Разность, Вычитание, Complement
                                    (other: Коллекция.Set):Коллекция.Set;
    var i, ii: Integer;
    var one: Variant;
    Result = Коллекция.Set.Create;
    ii = self.Count;
    for i = 1..ii do
      one = self.Item(i);
      if other.Search(one)[1] = nil then
        Result.Add(one);
      end;
    end;
  end;

end