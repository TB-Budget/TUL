--Turbo Utilities Library (c) Златовратский Павел(ТБ.Бюджет), 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class inherited FuncObj "Последовательное применение функций (композиция функций)";

inclass
  func New synonym CreateEx(first: FuncObj; second: FuncObj=nil): Wrap;
    Result = Create;
    result.Stack[1] = first;
    if second <> nil then
       result.Stack[2] = second;
    end;
  end;
inobject
   var Stack[]: FuncObj;

   func Вызвать synonym Call(Params:Variant[]):Variant;
   var i: Integer;
   var args: Variant[];
   var SyncCall: Class;
     try
       SyncCall = FindClass('TUL.AsyncTools');
     except
       SyncCall = nil;
     end;

     args = Params;
     for i = 1 .. LengthOfArray(self.Stack) do
        if SyncCall <> nil then
         args = [SyncCall.SyncCall(self.Stack[i], args)];
        else
         args = [self.Stack[i].Call(args)];
        end;
     od;
     return args[1];
   end;

end