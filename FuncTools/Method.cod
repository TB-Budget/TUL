--Turbo Utilities Library (c) Златовратский Павел(ТБ.Бюджет), 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class inherited FuncObj 'Метод как экземпляр функции';

InClass Public
  func New synonym CreateEx(aObj: Variant; aMethodName: String):Method;
    --aObj - объект или класс
    Result = Create;
    if varType(aObj) = varObject then
       Result.myObj = aObj;
       Result.myCla = Result.myObj.ClassType;
    elsif varType(aObj) = varClass then
      Result.myObj = nil;
      Result.myCla = aObj;
    else
      SetError(26, 'Type mismatch');
    end;
    Result.myMeth = Result.FindMethod(aMethodName);
  end;

  func CreateRTTI(aMethod: MethodInfo):Method;
    Result = Create;
    Result.myMeth = aMethod;
  end;

InObject Private
  myObj: Object;
  myCla: Class;
  myMeth: MethodInfo;

InObject Public
  func FindMethod(aMethodName: String): MethodInfo;
    var res: MemberInfo;
    res = myCla.ClassInfo.MemberByName(aMethodName);
    if res = nil then
       SetError(0,"В классе '"+myCla.ClassName+"' метод '"+aMethodName+"' не найден");
    end;
    Result = res;
  end;

  proc LoadParams;
    --Загрузка параметров функции
    var i, ii: Integer;
    var aType: TypeInfo;
    var aName: String;
    var aKind: MethodInfo.ParamKind;

    ii = self.myMeth.ParamsCount;
    for i = 1..ii do
      self.myMeth.ParamInfo(i, aName, aType, aKind);
      self.ParamList[i] = aName;
      self.ParamTypes[i] = aType;
    end;
    self.ResultType = self.myMeth.ResultType;
  end;

  func thisCall(Obj: Variant; Params: Variant[]): Variant;
    if myMeth.Kind = 2 then
      Result = myMeth.CallFuncEx(Obj, Params);
    elsif myMeth.Kind = 1 then
      try
        myMeth.CallProcEx(Obj, Params);
        Result = True;
      except
        Result = False;
        raise;
      end;
    else
      SetError(0,"Метод не является процедурой или функцией");
      Result = False;
    end;
  end;

  func Вызвать synonym Call(Params: Variant[]): Variant;
    if myObj = nil then
      Result = self.thisCall(myCla, Params);
    else
      Result = self.thisCall(myObj, Params);
    end;
  end;
end