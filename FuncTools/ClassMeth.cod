--Turbo Utilities Library (c) Златовратский Павел(ТБ.Бюджет), 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class inherited Method 'Метод класса как экземпляр функции';

InClass Public
  func CreateExS(aMethodName :String):ClassMeth;
    Result = Create;
    Result.FromString(aMethodname);
  end;

InObject Public
--  proc Загрузить synonym Load(aClass:Class;aMeth:MethodInfo);
--    myObj=aClass;
--    myMeth=aMeth;
--  end;

  proc ИзСтроки synonym FromString(aMethodName :String);
  var i:Integer;
  var sCl,sMe:String;
    i = WordsCount(aMethodName, '.');
    sMe = ExtractWord(aMethodName, i, '.');
    sCl = SubStr(aMethodName, 1, Length(aMethodName) - Length(sMe) - 1);
    if sCl = '' then 
      SetError(0,"Метод не найден, проверьте задание имени класса");
    end;
    self.myObj  = FindClass(sCl);
    self.myMeth = self.FindMethod(aMethodName);
  end;

end