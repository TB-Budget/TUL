--Turbo Utilities Library (c) Златовратский Павел(ТБ.Бюджет), 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class "Отложенный результат выполнения" synonym Promise;

inclass
   func Create: Promise;
    Result = inherited Create;
    AsyncLoop.Schedule(result);
  end;

inobject private
  _ready: Logical;
  _result: Variant;
inobject public
  id: String; --кеш для сверки
  func Equal(ob:AsyncResult):Logical;
    if ob = nil then
       return False;
    end;
    Result = (ob.id = self.id);
  end;


  func Ready:Logical;
    Result = self._ready;
  end;

  func then_ synonym AutoPoll (aCallback: FuncObj): AfterFuture;
    Result = AfterFuture.New(aCallback, self);
  end;

  func AResult:Variant;
    Result = self._result;
  end;

  func Get_:Variant;
    while not self.ready do
      AsyncLoop.Wait(0.1);
    end;
    return self.AResult;
  end;

  Proc Abort;
    AsyncLoop.UnSchedule(self);
  end;


end