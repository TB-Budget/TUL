class "";
inclass
var CAPICOM_ENCODE_ANY:Integer= 0xffffffff;
var CAPICOM_ENCODE_BASE64:Integer= 0;
var CAPICOM_ENCODE_BINARY:Integer= 1;

  proc SignFileToFile(FilePath:String; cert: AutoObject; detached: Logical);
    var src, tgt: TextFile;
    var srcBO: BinaryObject;
    var SD, CPSigner: AutoObject;
    var res:String;
    SD = AutoObject.Create('CAPICOM.SignedData');
    CPSigner = AutoObject.Create("CAPICOM.Signer");
    CPSigner.Certificate = cert;
    srcBO = BinaryObject.Create;
    src = TextFile.Create(FilePath, System.fmOpenRead, TextFile.Binary);
    srcBO.AsString  = src.Read(src.Size);
    SD.Content = srcBO;
    res = SD.Sign(CPSigner, detached, CAPICOM_ENCODE_BASE64) as String;
    tgt = TextFile.Create(FilePath+".sig", System.fmCreate, TextFile.Binary);
    tgt.Write(res);
  end;

  func  CertByThumbprint(t: String):AutoObject;
    var S:AutoObject;
    S = AutoObject.Create('CAPICOM.Store');
    S.Open;
    for var i = 1..S.Certificates.Count do
      if S.Certificates.Item[i].Thumbprint = t:
        Result = S.Certificates.Item[i];
        Break;
      fi;
    od;
  end;

end