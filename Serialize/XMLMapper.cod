--Turbo Utilities Library (c) Златовратский Павел(ТБ.Бюджет), 2016

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class "Сопоставитель XML с объектами Турбо9";
inclass
  proc AddInArray(var Array:Variant[]; Item:Variant);
  var l:Integer;
      l=LengthOfArray(Array);
      Array[l+1]=Item;
  end; 

--  func ParseXSD(file): Variant[];
--  -- первый элемент - неймспейс
--  -- второй элемент - хранилище ключ - имя типа, значение - тип
--    var xScheme:AutoObject;
--    xScheme = AutoObject.Create("Msxml2.DOMDocument.6.0");
--    xScheme.Async = False;
--    xScheme.load(file);
--
--
--  end;
  --CreateByXSD(file, namespace, xmltype);
inobject
  var namespace: String; --Пространство имен для типа XML (опционально)
  var xmltype: String; --Имя типа XML (если есть)
  var t9class: Variant; --Ссылка на класс Т9, если пусто - Storage
  var fields: XMLMapperNode[]; --Список элементов
  var allowreflection: Logical; --Позволить автоматическое создание полей.
                                --Для загрузки это требует типа Storage и все значения будут строками
                                --                                      массивы не допускаются
                                --При выгрузке это генерирует элементы по именам полей(!не реализовано!)

  func GetNodeField(Node:AutoObject; Nodedesc:XMLMapperNode):Variant;
    -- Здесь перебираем узлы
    var sub1: AutoObject;
    var i: Integer;
    var resa: Variant[];
    var res_:Variant;
    sub1 = Node.childNodes;
    i = 0;
    While i < sub1.length do
       --Если узел соответствует ожидаемому(по типу)
       if (sub1.item(i).nodeName = Nodedesc.nodename and sub1.item(i).nodeType =  Nodedesc.nodekind) or
          (Nodedesc.nodekind = 3 and sub1.item(i).nodeType =  Nodedesc.nodekind) then
          --Загружаем узел
          res_ = nodedesc.LoadNodeValue(sub1.item(i));
          --Удаляем узел
          Node.removeChild(sub1.item(i));
          --Сохраняем значение
          if Nodedesc.repeatable then
            AddInArray(resa, res_);
          else
            Break;
          end;
       else
         i = i + 1;
       end; --/загрузка узла
    od;
    --Загрузка атрибутов. 
    --Непонятно могли ли они быть загружены на предыдущем шаге, но если могли - их удалили.
    if Nodedesc.nodekind = 2 then
      sub1 = Node.attributes;
      i = 0;
      While i < sub1.length do
         if sub1.item(i).nodeName = Nodedesc.nodename and sub1.item(i).nodeType =  Nodedesc.nodekind then
            --Загружаем узел
            res_ = nodedesc.LoadNodeValue(sub1.item(i));
            --Узел удалять не надо - атрибуты уникальны.
            --Сохраняем значение
            if Nodedesc.repeatable then
              AddInArray(resa, res_);
            else
              Break;
            end;
         else
           i = i + 1;
         end; --/загрузка узла
      od;
    fi;--/загрузка атрибутов

    if Nodedesc.repeatable then
      Result = resa;
    else
      Result = res_;
    fi;
  end;

  func ParseNode(Node:AutoObject):Object;
    --Здесь перебираем Поля
    var res:Object;
    var val:Variant;
    var i: Integer;
    var ii: Integer;
    var sub1:AutoObject;
    var wrk:AutoObject;
    if Node = nil then
       return nil;
    end;
    wrk = Node.cloneNode(True); --Копируем узел, т.к. в процессе обработки будем удалять дочерние узлы.
    if t9class = nil then
      res = Storage.Create;
    else
      res = t9class.Create;
    end;
    ii = lengthOfArray(fields);
    for i = 1..ii do
        val = self.GetNodeField(wrk, fields[i]);
        res.SetField(fields[i].fieldname, val);
    end;
    if self.allowreflection then
      --рефлексия
      --Перебираем оставшиеся узлы
      sub1=wrk.childNodes;
      for i = 1..sub1.length do
          res.SetField(sub1.item(i-1).nodeName, sub1.item(i-1).text);
      od;
    end;

    Result = res;
  end;

  func ExportNode(Source: Object; Target: AutoObject=nil): AutoObject;
    --Здесь перебираем Поля
    var val: AutoObject;
    var i: Integer;
    var ii: Integer;
    var wrk: Variant[];
    var j, jj: Integer;

    if Source = nil then
       return nil;
    end;
    if Target = nil then
       Target = AutoObject.Create('Msxml2.XMLHTTP.6.0');
    end;

    ii = lengthOfArray(fields);
    for i = 1..ii do
        if fields[i].repeatable then
           wrk = Source.GetField(fields[i].fieldname) as Variant[];
           jj = LengthOfArray(wrk);
           for j = 1..jj do
              Target.appendChild(fields[i].SaveNodeValue(wrk[j], Target));
           end;
        else
          Target.appendChild(
            fields[i].SaveNodeValue(
              Source.GetField(fields[i].fieldname),
              Target));
        end;
    end;
--    if self.allowreflection then
--      --рефлексия
--      --Перебираем оставшиеся узлы
--      sub1=wrk.childNodes;
--      for i = 1..sub1.length do
--          res.SetField(sub1.item(i-1).nodeName, sub1.item(i-1).text);
--      od;
--    end;
--
    Result = Target;
  end;

end