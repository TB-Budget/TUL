--Turbo Utilities Library (c) Златовратский Павел(ТБ.Бюджет), 2016

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class "Узел сопоставления XML с объектом";

inclass

inobject
  var nodetype: Variant; --Тип узла. Может быть:
                       --целым от 1 до 5 (см. varType),
                       --объектом сопоставителя(XMLMapper)
  var nodename: String; --Имя узла XML
  var nodekind: Integer; --Вариант узла:
                         --1-элемент, 
                         --2-атрибут,
                         --3-содержимое (при этом nodename игнорируется)
  var fieldname: String; --Имя поля объекта Т9
  var repeatable: Logical; --Узел повторяется (в Т9 представляется массивом соотв. типа)

  func LoadNodeValue(Node:AutoObject):variant;
    var tmpS:String;

    if varType(self.nodetype) = varInt then
      --Простые типы
      if self.nodetype = varString then
         Result = Node.text;
      elsif self.nodetype = varInt then
         Result = Int(Node.text);
      elsif self.nodetype = varNumeric then
         --TODO: Экспоненциальный формат
         Result = Num(Node.text);
      elsif self.nodetype = varLogical then
         tmpS =  Node.text;
         if tmpS = nil or tmpS = '0' or Lo(tmpS)='false' or Lo(tmpS)='ложь' then
            Result = False;
         else
            Result = True;
         end;
      --varDate    :Integer = 5;  -- ДатаВремя в формате TDateTime
      --TODO!!!
      end;
    elsif varType(self.nodetype) = varObject:
      --Объектные типы
      if self.nodetype.Classtype = XMLMapper then
         Result = self.nodetype.ParseNode(Node);
      end;
    end;
  end;

  func SaveNodeValue(Value: Variant; Doc:AutoObject=nil):AutoObject;
    --Отсюда мы должны получить готовый узел
    var data: AutoObject;
    if varType(self.nodetype) = varInt then
      --Простые типы
      if nodetype = varString or nodetype = varInt or nodetype = varNumeric then
         data = Doc.createTextNode(Str(Value));
      elsif nodetype = varLogical then
         if Value then
            data = Doc.createTextNode("true");
         else
            data = Doc.createTextNode("false");
         end;
      end;
      --!!! Добавить обертку в тег!!!
    elsif varType(self.nodetype) = varObject:
      --Объектные типы
      if self.nodetype.Classtype = XMLMapper then
         data = Doc.createNode();--!!!
         data = self.nodetype.ExportNode(Value, data);
      end;
    end;
    Result = data;
  end;

end