--Turbo Utilities Library (c) Златовратский Павел(ТБ.Бюджет), 2016

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class "Простейшее формирование XML";
inclass public

  #Help `  Создание экземпляра класса SimpleXML.
           Параметры:
           locUseBreakLine - применять перенос строк;
           locUseIndent - применять отступы (только если UseBreakLine)
           locIndentSize - количество пробелов отступа (только если UseIndent)
           Метод только создает объект и устанавливает управляющие параметры формирования строк.
           `;
  func CreateEx(locUseBreakLine: logical = true; locUseIndent: logical = true; locIndentSize: integer = 4): SimpleXML;
    Result = SimpleXML.Create;
    Result.UseBreakLine = locUseBreakLine;
    if locUseBreakLine:
      Result.UseIndent = locUseIndent;
      if locUseIndent:
        Result.IndentSize = locIndentSize;
      fi;
    fi;
  end;

  func EasyStrorage(src: String):Storage;
  -- Key1=Value1#Key2=Value2
    var myStorage:Storage;
    var i, ii:Integer;
    var one:String;
    myStorage = Storage.Create;
    ii = WordsCount(src, "#");
    for i = 1..ii do
        one = ExtractWord(src, i, "#");
        myStorage.SetField(ExtractWord(one, 1, "="), ExtractWord(one, 2, "="));
    end;
    Result = myStorage;
  end;

  func ScreenStr(src: String): String;
  var tmp: SimpleXML;
  var i, ii: Integer;
    tmp = Create;
    tmp.ToResScreen(src);
    for i = 1..ii do
      Result = Result + tmp.Data[i];
    end;
  end;

  proc AddInArray (var Array: Variant[]; Item: Variant);
    var l: Integer;
    l=LengthOfArray(Array);
    Array[l+1]=Item;
  end; 


inobject private

  UseBreakLine: logical; -- применять разрывы строк
  UseIndent: logical; -- применять отступы (только если UseBreakLine)
  IndentSize: integer; -- количество пробелов отступа (только если UseIndent)
  Data[]:String; --Набор данных XML. Массив используется для добавления в конец без переприсвоения
  Depth[]:String; --Список открытых тэгов. FIFO-буфер для закрытия тэгов.

  #Help `  Вычисление отступа.`;
  func Indent: string;
    var locLevel: Integer;
    var locResult: string;
    if UseIndent:
      locResult = RepStr(' ', IndentSize);
      locLevel = LengthOfArray(Depth);
      Return RepStr(locResult, locLevel);
    fi;
  end;

inobject public

  #Help `  Добавление произвольной строки.`;
  proc ToRes synonym ВРез (more: String);
    AddInArray(Data, more);
  end;

  #Help `  Добавление произвольной строки с заменой спецсимоволов на встроенные сущности xml.`;
  proc ToResScreen synonym ВРезЭкран(more: String);
    var l: integer;
    -- кавычки
    l = Pos('"', more);
    if l <> 0:
      ToResScreen(Substr(more, 1, l - 1));
      ToRes("&quot;");
      ToResScreen(Substr(more, l + 1, 255));
      Return;
    fi;
    -- апостроф
    l = Pos("'", more);
    if l <> 0:
      ToResScreen(Substr(more, 1, l - 1));
      ToRes("&apos;");
      ToResScreen(Substr(more, l + 1, 255));
      Return;
    fi;
    -- амперсенд
    l = Pos("&", more);
    if l <> 0:
      ToResScreen(Substr(more, 1, l - 1));
      ToRes("&amp;");
      ToResScreen(Substr(more, l + 1, 255));
      Return;
    fi;
    -- меньше
    l = Pos('<', more);
    if l <> 0:
      ToResScreen(Substr(more, 1, l - 1));
      ToRes("&lt;");
      ToResScreen(Substr(more, l + 1, 255));
      Return;
    fi;
    -- больше
    l = Pos('>', more);
    if l <> 0:
      ToResScreen(Substr(more, 1, l - 1));
      ToRes("&gt;");
      ToResScreen(Substr(more, l + 1, 255));
      Return;
    fi;
    -- Все проверки прошли - добавляем неэкранированно
    ToRes(more);
  end;

  #Help `  Создание открывающего тэга элемента XML.
           Параметры:
           Name - Идентификатор;
           Attrib - атрибуты.
           Атрибуты передаются в формате проинициализированного Storage,
           в котором имя поля соответствует идентификатору атрибута,
           а значение поля соответствует значению идентификатора
           `;
  proc OpenTag synonym ОткрытьТэг(Name: String; Attrib: Storage = nil);
    var i: Integer;
    if UseIndent:
      ToRes(Indent + "<" + Name);
    else
      ToRes("<" + Name);
    fi;
    if Attrib <> nil:
      for i = 1 .. Attrib.Count do
         ToRes(" " + Attrib.IndexByNumber[i] + "='");
         ToResScreen(Str(Attrib.ItemsByNumber[i]));
         ToRes("'");
      od;
    fi;
    if UseBreakLine:
      ToRes(">" + Chr(13));
    else
      ToRes(">");
    fi;
    InsertInArray(Depth, 1, Name);
  end;

  #Help `  Создание закрывающего тэга элемента XML.`;
  func CloseTag synonym ЗакрытьТэг: String;
    var Name: String;
    Name = Depth[1];
    DeleteFromArray(Depth,1);
    if UseBreakLine:
      if UseIndent:
        ToRes(Indent + "</" + Name + ">" + Chr(13));
      else
        ToRes("</" + Name + ">" + Chr(13));
      fi;
    else
      ToRes("</" + Name + ">");
    fi;
    Result = Name;
  end;

  #Help `  Создание элемента XML, включающего содержимое элемента, атрибуты и закрывающий тэг.
           Параметры:
           Name - Идентификатор элемента;
           Content - содержимое элемента;
           Attrib - атрибуты.
           Атрибуты передаются в формате проинициализированного Storage,
           в котором имя поля соответствует идентификатору атрибута,
           а значение поля соответствует значению идентификатора
           `;
  proc CreateElement synonym CreateTag, СоздатьЭлемент, СоздатьТэг (Name: String; Content: String = nil; Attrib: Storage = nil);
    var i: Integer;
    if (Content = nil):
      if UseIndent:
        ToRes(Indent + "<" + Name);
      else
        ToRes("<" + Name);
      fi;
      if (Attrib <> nil):
        for i = 1 .. Attrib.Count do
           ToRes(" " + Attrib.IndexByNumber[i] + "='");
           ToResScreen(Str(Attrib.ItemsByNumber[i]));
           ToRes("'");
        od;
      fi;
      if UseBreakLine:
        ToRes("/>" + Chr(13));
      else
        ToRes("/>");
      fi;
    else
      OpenTag(Name, Attrib);
      ToResScreen(Content);
      CloseTag;
    fi;
  end;

  #Help `  Вставка в документ содержимого, не предназначенного для синтаксического анализа.`;
  proc CreateComment synonym СоздатьКомментарий (Content: String);
    ToRes('<!--' + Content + '-->');
  end;

  #Help `  Представление набранного XML качестве строки, прописав кодировку в заголовок.
           !!! Истинная кодировка символов остается 1251!!!
           `;
  func OneString synonym ОднойСтрокой(Encoding: String='windows-1251'): String;
    var i, ii: Integer;
    Result = '<?xml version="1.0" encoding="'+encoding+'"?>'+chr(10);
    ii = LengthOfArray(self.Data);
    for i = 1..ii do
      --Hint('Запись файла...', i, ii);
      Result = Result + self.Data[i];
    end;
  end;

  #Help `  Вставка в документ разрыва строки`;
  proc AddBreakLine synonym BreakLine;
     AddInArray(Data, Chr(13));
  end;

  #Help `  Формирование xml-файла.
           Параметры:
           Path - место сохранения файла;
           Encoding - кодировка (по умолчанию windows-1251).
           `;
  proc ToFile synonym ВФайл(Path: String; Encoding:String='');
    var F: TextFile;
    var Fenc: TextFile.Encodings;
    if Encoding = '' or Encoding = 'win1251' or Encoding = '1251':
       Encoding = 'windows-1251';
       Fenc = TextFile.ANSI;
    fi;
    if Encoding = 'UTF-8' then
       Fenc = TextFile.UTF8;
    end;

    if Fenc = TextFile.UTF8 then
       -- Формируем заголововок с BOM
      F = TextFile.Create(Path, fmCreate, TextFile.Binary);
      F.Write(chr(0xEF) + chr(0xBB) + chr(0xBF));  -- UTF8
      F.Flush;
      F = nil;
      F = Textfile.Create(Path, fmOpenReadWrite, Fenc);
      F.Seek(0, 2);
    else
      F = Textfile.Create(Path, fmCreate, Fenc);
    end;


    F.Write(self.OneString(Encoding));
    F.Flush;
  end;

end